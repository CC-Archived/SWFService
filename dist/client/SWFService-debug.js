/*!
 * [SWFService](http://github.com/CodeCatalyst/SWFService) v2.0.0
 * Copyright (c) 2008-2013 [CodeCatalyst, LLC](http://codecatalyst.com)
 * Open source under the [MIT License](http://en.wikipedia.org/wiki/MIT_License).
 */

/*!
 * [promise.coffee](http://github.com/CodeCatalyst/promise.coffee) v1.0
 * Copyright (c) 2012-2013 [CodeCatalyst, LLC](http://www.codecatalyst.com/).
 * Open source under the [MIT License](http://en.wikipedia.org/wiki/MIT_License).
 */
// Generated by CoffeeScript 1.4.0

(function() {
  var Deferred, Promise, Resolver, isFunction, nextTick, target;

  nextTick = (typeof process !== "undefined" && process !== null ? process.nextTick : void 0) || (typeof setImmediate !== "undefined" && setImmediate !== null) || function(task) {
    return setTimeout(task, 0);
  };

  isFunction = function(value) {
    return typeof value === 'function';
  };

  Resolver = (function() {

    function Resolver(onResolved, onRejected) {
      var complete, completeRejected, completeResolved, completed, completionAction, completionValue, pendingResolvers, process, processed, propagate, schedule;
      this.promise = new Promise(this);
      pendingResolvers = [];
      processed = false;
      completed = false;
      completionValue = null;
      completionAction = null;
      if (!isFunction(onRejected)) {
        onRejected = function(error) {
          throw error;
        };
      }
      propagate = function() {
        var pendingResolver, _i, _len;
        for (_i = 0, _len = pendingResolvers.length; _i < _len; _i++) {
          pendingResolver = pendingResolvers[_i];
          pendingResolver[completionAction](completionValue);
        }
        pendingResolvers = [];
      };
      schedule = function(pendingResolver) {
        pendingResolvers.push(pendingResolver);
        if (completed) {
          propagate();
        }
      };
      complete = function(action, value) {
        onResolved = onRejected = null;
        completionAction = action;
        completionValue = value;
        completed = true;
        propagate();
      };
      completeResolved = function(result) {
        complete('resolve', result);
      };
      completeRejected = function(reason) {
        complete('reject', reason);
      };
      process = function(callback, value) {
        processed = true;
        try {
          if (isFunction(callback)) {
            value = callback(value);
          }
          if (value && isFunction(value.then)) {
            value.then(completeResolved, completeRejected);
          } else {
            completeResolved(value);
          }
        } catch (error) {
          completeRejected(error);
        }
      };
      this.resolve = function(result) {
        if (!processed) {
          process(onResolved, result);
        }
      };
      this.reject = function(error) {
        if (!processed) {
          process(onRejected, error);
        }
      };
      this.then = function(onResolved, onRejected) {
        var pendingResolver;
        if (isFunction(onResolved) || isFunction(onRejected)) {
          pendingResolver = new Resolver(onResolved, onRejected);
          nextTick(function() {
            return schedule(pendingResolver);
          });
          return pendingResolver.promise;
        }
        return this.promise;
      };
    }

    return Resolver;

  })();

  Promise = (function() {

    function Promise(resolver) {
      this.then = function(onFulfilled, onRejected) {
        return resolver.then(onFulfilled, onRejected);
      };
    }

    return Promise;

  })();

  Deferred = (function() {

    function Deferred() {
      var resolver;
      resolver = new Resolver();
      this.promise = resolver.promise;
      this.resolve = function(result) {
        return resolver.resolve(result);
      };
      this.reject = function(error) {
        return resolver.reject(error);
      };
    }

    return Deferred;

  })();

  target = typeof exports !== "undefined" && exports !== null ? exports : window;

  target.Deferred = Deferred;

  target.defer = function() {
    return new Deferred();
  };

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var EntitySet, SWFService, SWFServiceContext, SWFServiceEventListenerProxy, SWFServiceOperationProxy, SWFServiceProxy, target;

  EntitySet = (function() {

    function EntitySet(entityClass, entityKeyProperty) {
      this.entityClass = entityClass;
      this.entityKeyProperty = entityKeyProperty != null ? entityKeyProperty : 'id';
      this.entitiesByKey = {};
    }

    EntitySet.prototype.add = function(entity) {
      var entityKey;
      if (!(entity instanceof this.entityClass)) {
        throw new Error("Entity must be of type: " + this.entityClass.name + " to be added to this EntitySet.");
      }
      entityKey = entity[this.entityKeyProperty];
      if (this.exists(entityKey)) {
        throw new Error("An Entity with key: " + entityKey + " already exists in this EntitySet.");
      }
      this.entitiesByKey[entityKey] = entity;
      return entity;
    };

    EntitySet.prototype.remove = function(entity) {
      if (this.contains(entity)) {
        delete this.entitiesByKey[entity[this.entityKeyProperty]];
        return entity;
      }
      return null;
    };

    EntitySet.prototype.removeAll = function() {
      this.entitiesByKey = {};
    };

    EntitySet.prototype.get = function(key) {
      return this.entitiesByKey[key];
    };

    EntitySet.prototype.find = function(attributes) {
      var matches;
      matches = function(entity) {
        var attribute, attributeValue;
        for (attribute in attributes) {
          attributeValue = attributes[attribute];
          if (entity[attribute] !== attributeValue) {
            return false;
          }
        }
        return true;
      };
      return this.match(matches);
    };

    EntitySet.prototype.match = function(matcherFunction) {
      var entity, entityId, matchingEntities, _ref;
      matchingEntities = [];
      _ref = this.entitiesByKey;
      for (entityId in _ref) {
        entity = _ref[entityId];
        if (matcherFunction(entity)) {
          matchingEntities.push(entity);
        }
      }
      return matchingEntities;
    };

    EntitySet.prototype.contains = function(entity) {
      var entityKey;
      entityKey = entity[this.entityKeyProperty];
      return this.exists(entityKey) && entity === this.get(entityKey);
    };

    EntitySet.prototype.exists = function(key) {
      return this.entitiesByKey[key] != null;
    };

    EntitySet.prototype.toArray = function() {
      var entities, entity, entityId, _ref;
      entities = [];
      _ref = this.entitiesByKey;
      for (entityId in _ref) {
        entity = _ref[entityId];
        entities.push(entity);
      }
      return entities;
    };

    return EntitySet;

  })();

  SWFServiceProxy = (function() {

    function SWFServiceProxy(serviceContext, id) {
      var accessor, createGetter, createMethod, createSetter, method, serviceDescriptor, variable, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
      this.id = id;
      createGetter = function(propertyName) {
        return function() {
          return serviceContext.getServiceProperty(id, propertyName);
        };
      };
      createSetter = function(propertyName) {
        return function(value) {
          serviceContext.setServiceProperty(id, propertyName, value);
        };
      };
      createMethod = function(methodName) {
        return function() {
          var args;
          args = Array.prototype.slice.call(arguments);
          return serviceContext.executeServiceMethod(id, methodName, args);
        };
      };
      serviceDescriptor = serviceContext.getServiceDescriptor(id);
      _ref = serviceDescriptor.accessors;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        accessor = _ref[_i];
        Object.defineProperty(this, accessor.name, {
          writeable: accessor.access !== 'readonly',
          get: createGetter(accessor.name),
          set: createSetter(accessor.name)
        });
      }
      _ref1 = serviceDescriptor.variables;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        variable = _ref1[_j];
        Object.defineProperty(this, variable.name, {
          get: createGetter(variable.name),
          set: createSetter(variable.name)
        });
      }
      _ref2 = serviceDescriptor.methods;
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        method = _ref2[_k];
        this[method.name] = createMethod(method.name);
      }
      if (serviceDescriptor.isEventDispatcher) {
        this.addEventListener = function(eventType, listenerFunction, useCapture, priority, weakReference) {
          if (useCapture == null) {
            useCapture = false;
          }
          if (priority == null) {
            priority = 0;
          }
          if (weakReference == null) {
            weakReference = false;
          }
          serviceContext.addServiceEventListener(id, eventType, listenerFunction, useCapture, priority, weakReference);
        };
        this.removeEventListener = function(eventType, listenerFunction, useCapture) {
          if (useCapture == null) {
            useCapture = false;
          }
          serviceContext.removeServiceEventListener(id, eventType, listenerFunction, useCapture);
        };
      }
    }

    return SWFServiceProxy;

  })();

  SWFServiceOperationProxy = (function() {

    function SWFServiceOperationProxy(id, serviceId, methodName, args) {
      var deferred;
      this.id = id;
      this.serviceId = serviceId;
      this.methodName = methodName;
      this.args = args;
      deferred = new Deferred();
      this.promise = deferred.promise, this.resolve = deferred.resolve, this.reject = deferred.reject;
    }

    return SWFServiceOperationProxy;

  })();

  SWFServiceEventListenerProxy = (function() {

    function SWFServiceEventListenerProxy(id, serviceId, eventType, listenerFunction, useCapture, priority, useWeakReference) {
      this.id = id;
      this.serviceId = serviceId;
      this.eventType = eventType;
      this.listenerFunction = listenerFunction;
      this.useCapture = useCapture != null ? useCapture : false;
      this.priority = priority != null ? priority : 0;
      this.useWeakReference = useWeakReference != null ? useWeakReference : false;
    }

    SWFServiceEventListenerProxy.prototype.matches = function(serviceId, eventType, listenerFunction, useCapture) {
      return this.serviceId === serviceId && this.eventType === eventType && this.listenerFunction === listenerFunction && this.useCapture === useCapture;
    };

    SWFServiceEventListenerProxy.prototype.redispatch = function(event) {
      return this.listenerFunction(event);
    };

    return SWFServiceEventListenerProxy;

  })();

  SWFServiceContext = (function() {

    function SWFServiceContext(swf) {
      this.swf = swf;
      this.id = this.swf.SWFServiceContext_getId();
      this.serviceProxies = new EntitySet(SWFServiceProxy);
      this.serviceOperationProxies = new EntitySet(SWFServiceOperationProxy);
      this.serviceEventListenerProxies = new EntitySet(SWFServiceEventListenerProxy);
      return;
    }

    SWFServiceContext.prototype.get = function(serviceId) {
      return this.serviceProxies.get(serviceId) || this.serviceProxies.add(new SWFServiceProxy(this, serviceId));
    };

    SWFServiceContext.prototype.getServiceDescriptor = function(serviceId) {
      return this.swf.SWFServiceContext_getServiceDescriptor(serviceId);
    };

    SWFServiceContext.prototype.getServiceProperty = function(serviceId, propertyName) {
      return this.swf.SWFServiceContext_getServiceProperty(serviceId, propertyName);
    };

    SWFServiceContext.prototype.setServiceProperty = function(serviceId, propertyName, value) {
      this.swf.SWFServiceContext_setServiceProperty(serviceId, propertyName, value);
    };

    SWFServiceContext.prototype.executeServiceMethod = function(serviceId, methodName, args) {
      var returnValue, serviceOperationProxy;
      returnValue = this.swf.SWFServiceContext_executeServiceMethod(serviceId, methodName, args);
      if (returnValue.pending) {
        serviceOperationProxy = new SWFServiceOperationProxy(returnValue.operationId, serviceId, methodName, args);
        this.serviceOperationProxies.add(serviceOperationProxy);
        return serviceOperationProxy.promise;
      }
      return returnValue.value;
    };

    SWFServiceContext.prototype.addServiceEventListener = function(serviceId, eventType, listenerFunction, useCapture, priority, weakReference) {
      var serviceEventListenerProxyId;
      serviceEventListenerProxyId = this.swf.SWFServiceContext_addServiceEventListener(serviceId, eventType, useCapture, priority, weakReference);
      this.serviceEventListenerProxies.add(new SWFServiceEventListenerProxy(serviceEventListenerProxyId, serviceId, eventType, listenerFunction, useCapture, priority, weakReference));
    };

    SWFServiceContext.prototype.removeServiceEventListener = function(serviceId, eventType, listenerFunction, useCapture) {
      var serviceEventListenerProxy;
      serviceEventListenerProxy = this.serviceEventListenerProxies.find({
        serviceId: serviceId,
        eventType: eventType,
        listenerFunction: listenerFunction,
        useCapture: useCapture
      })[0];
      if (serviceEventListenerProxy != null) {
        this.swf.SWFServiceContext_removeServiceEventListener(serviceId, serviceEventListenerProxy.id);
        this.serviceEventListenerProxies.remove(serviceEventListenerProxy);
      }
    };

    SWFServiceContext.prototype.onServiceExecuteComplete = function(serviceId, serviceOperationProxyId, action, value) {
      var serviceOperationProxy;
      serviceOperationProxy = this.serviceOperationProxies.get(serviceOperationProxyId);
      if (serviceOperationProxy != null) {
        serviceOperationProxy[action](value);
        this.serviceOperationProxies.remove(serviceOperationProxy);
      }
    };

    SWFServiceContext.prototype.onServiceEvent = function(serviceId, serviceEventListenerProxyId, event) {
      return this.serviceEventListenerProxies.get(serviceEventListenerProxyId).redispatch(event);
    };

    return SWFServiceContext;

  })();

  SWFService = (function() {

    function SWFService() {
      this.serviceContexts = new EntitySet(SWFServiceContext);
    }

    SWFService.prototype.get = function(swf, serviceId) {
      var serviceContext;
      serviceContext = this.serviceContexts.find({
        swf: swf
      })[0] || this.serviceContexts.add(new SWFServiceContext(swf));
      return serviceContext.get(serviceId);
    };

    SWFService.prototype.onServiceExecuteComplete = function(serviceContextId, serviceId, operationId, action, value) {
      return this.serviceContexts.get(serviceContextId).onServiceExecuteComplete(serviceId, operationId, action, value);
    };

    SWFService.prototype.onServiceEvent = function(serviceContextId, serviceId, listenerId, event) {
      return this.serviceContexts.get(serviceContextId).onServiceEvent(serviceId, listenerId, event);
    };

    return SWFService;

  })();

  target = typeof exports !== "undefined" && exports !== null ? exports : window;

  target.SWFService = new SWFService();

}).call(this);
