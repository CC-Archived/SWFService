// Generated by CoffeeScript 1.6.3
(function() {
  describe('SWFService', function() {
    var arrayTestValues, booleanTestValues, intTestValues, numberTestValues, objectTestValues, stringTestValues, uintTestValues, untypedTestValues;
    booleanTestValues = [false, true];
    intTestValues = [-2147483648, 0, 2147483647];
    uintTestValues = [0, 4294967295];
    numberTestValues = [1.79769313486231e+308, 0, 4.9406564584124654e-324, Infinity];
    stringTestValues = [null, '', '0', '123', '3.14', 'test', "'", '"', 'Hello world!', 'Γεια σας κόσμο!', '世界，你好！'];
    arrayTestValues = [null, [], [0], [1, 2, 3], [true, 0, 4294967295, 3.14, 'test', [1, 2, 3], {}]];
    objectTestValues = [
      null, [], {}, {
        key: 'value'
      }, {
        booleanValue: true,
        intValue: 0,
        uintValue: 4294967295,
        numberValue: 3.14,
        stringValue: 'test',
        arrayValue: [1, 2, 3],
        objectValue: {
          key: 'value'
        }
      }
    ];
    untypedTestValues = [
      null, -2147483648, 2147483647, 0, 4294967295, 1.79769313486231e+308, 4.9406564584124654e-324, Infinity, '', '0', '123', '3.14', 'test', "'", '"', 'Hello world!', 'Γεια σας κόσμο!', '世界，你好！', [], [0], [1, 2, 3], [true, 0, 4294967295, 3.14, 'test', [1, 2, 3], {}], {}, {
        key: 'value'
      }, {
        booleanValue: true,
        intValue: 0,
        uintValue: 4294967295,
        numberValue: 3.14,
        stringValue: 'test',
        arrayValue: [1, 2, 3],
        objectValue: {
          key: 'value'
        }
      }
    ];
    describe('Obtaining a JavaScript proxy', function() {
      describe('get()', function() {
        specify('returns a Promise of a reference to a JavaScript proxy for a registered service in the SWF', function() {
          var promise;
          this.timeout(30000);
          promise = SWFService.get('TestSWF', 'TestService');
          return promise.should.eventually.be.not["null"];
        });
        specify('throws an Error after the specified timeout if the specified SWF is not available', function() {
          var promise;
          this.timeout(500);
          promise = SWFService.get('NonExistentSWF', 'NonExistentService', 250);
          return promise.should.be.rejectedWith(Error, 'SWFService timed out attempting to access the requested SWF.');
        });
        specify('throws an Error after the specified timeout if the specified service is not available for the specified SWF', function() {
          var promise;
          this.timeout(500);
          promise = SWFService.get('TestSWF', 'NonExistentService', 250);
          return promise.should.be.rejectedWith(Error, 'Request for SWF service proxy with id: "NonExistentService" timed out.');
        });
      });
    });
    return describe('JavaScript proxy operations', function() {
      var testService;
      testService = null;
      before(function(done) {
        SWFService.get('TestSWF', 'TestService').then(function(value) {
          testService = value;
          done();
        });
      });
      describe('get and set properties', function() {
        describe('Boolean', function() {
          var value, _fn, _i, _len;
          _fn = function(value) {
            specify(value, function() {
              testService.booleanProperty = value;
              expect(testService.booleanProperty).to.equal(value);
            });
          };
          for (_i = 0, _len = booleanTestValues.length; _i < _len; _i++) {
            value = booleanTestValues[_i];
            _fn(value);
          }
        });
        describe('int', function() {
          var value, _fn, _i, _len;
          _fn = function(value) {
            specify(value, function() {
              testService.intProperty = value;
              expect(testService.intProperty).to.equal(value);
            });
          };
          for (_i = 0, _len = intTestValues.length; _i < _len; _i++) {
            value = intTestValues[_i];
            _fn(value);
          }
        });
        describe('uint', function() {
          var value, _fn, _i, _len;
          _fn = function(value) {
            specify(value, function() {
              testService.uintProperty = value;
              expect(testService.uintProperty).to.equal(value);
            });
          };
          for (_i = 0, _len = uintTestValues.length; _i < _len; _i++) {
            value = uintTestValues[_i];
            _fn(value);
          }
        });
        describe('Number', function() {
          var value, _fn, _i, _len;
          _fn = function(value) {
            specify(value, function() {
              testService.numberProperty = value;
              expect(testService.numberProperty).to.equal(value);
            });
          };
          for (_i = 0, _len = numberTestValues.length; _i < _len; _i++) {
            value = numberTestValues[_i];
            _fn(value);
          }
        });
        describe('String', function() {
          var value, _fn, _i, _len;
          _fn = function(value) {
            specify(value, function() {
              testService.stringProperty = value;
              expect(testService.stringProperty).to.equal(value);
            });
          };
          for (_i = 0, _len = stringTestValues.length; _i < _len; _i++) {
            value = stringTestValues[_i];
            _fn(value);
          }
        });
        describe('Array', function() {
          var value, _fn, _i, _len;
          _fn = function(value) {
            specify(JSON.stringify(value), function() {
              testService.arrayProperty = value;
              expect(testService.arrayProperty).to.deep.equal(value);
            });
          };
          for (_i = 0, _len = arrayTestValues.length; _i < _len; _i++) {
            value = arrayTestValues[_i];
            _fn(value);
          }
        });
        describe('Object', function() {
          var value, _fn, _i, _len;
          _fn = function(value) {
            specify(JSON.stringify(value), function() {
              testService.objectProperty = value;
              expect(testService.objectProperty).to.deep.equal(value);
            });
          };
          for (_i = 0, _len = objectTestValues.length; _i < _len; _i++) {
            value = objectTestValues[_i];
            _fn(value);
          }
        });
        describe('untyped', function() {
          var value, _fn, _i, _len;
          _fn = function(value) {
            specify(JSON.stringify(value), function() {
              testService.untypedProperty = value;
              expect(testService.untypedProperty).to.deep.equal(value);
            });
          };
          for (_i = 0, _len = untypedTestValues.length; _i < _len; _i++) {
            value = untypedTestValues[_i];
            _fn(value);
          }
        });
      });
      describe('get and set accessors', function() {
        describe('Boolean', function() {
          var value, _fn, _i, _len;
          _fn = function(value) {
            specify(value, function() {
              testService.booleanAccessor = value;
              expect(testService.booleanAccessor).to.equal(value);
            });
          };
          for (_i = 0, _len = booleanTestValues.length; _i < _len; _i++) {
            value = booleanTestValues[_i];
            _fn(value);
          }
        });
        describe('int', function() {
          var value, _fn, _i, _len;
          _fn = function(value) {
            specify(value, function() {
              testService.intAccessor = value;
              expect(testService.intAccessor).to.equal(value);
            });
          };
          for (_i = 0, _len = intTestValues.length; _i < _len; _i++) {
            value = intTestValues[_i];
            _fn(value);
          }
        });
        describe('uint', function() {
          var value, _fn, _i, _len;
          _fn = function(value) {
            specify(value, function() {
              testService.uintAccessor = value;
              expect(testService.uintAccessor).to.equal(value);
            });
          };
          for (_i = 0, _len = uintTestValues.length; _i < _len; _i++) {
            value = uintTestValues[_i];
            _fn(value);
          }
        });
        describe('Number', function() {
          var value, _fn, _i, _len;
          _fn = function(value) {
            specify(value, function() {
              testService.numberAccessor = value;
              expect(testService.numberAccessor).to.equal(value);
            });
          };
          for (_i = 0, _len = numberTestValues.length; _i < _len; _i++) {
            value = numberTestValues[_i];
            _fn(value);
          }
        });
        describe('String', function() {
          var value, _fn, _i, _len;
          _fn = function(value) {
            specify(value, function() {
              testService.stringAccessor = value;
              expect(testService.stringAccessor).to.equal(value);
            });
          };
          for (_i = 0, _len = stringTestValues.length; _i < _len; _i++) {
            value = stringTestValues[_i];
            _fn(value);
          }
        });
        describe('Array', function() {
          var value, _fn, _i, _len;
          _fn = function(value) {
            specify(JSON.stringify(value), function() {
              testService.arrayAccessor = value;
              expect(testService.arrayAccessor).to.deep.equal(value);
            });
          };
          for (_i = 0, _len = arrayTestValues.length; _i < _len; _i++) {
            value = arrayTestValues[_i];
            _fn(value);
          }
        });
        describe('Object', function() {
          var value, _fn, _i, _len;
          _fn = function(value) {
            specify(JSON.stringify(value), function() {
              testService.objectAccessor = value;
              expect(testService.objectAccessor).to.deep.equal(value);
            });
          };
          for (_i = 0, _len = objectTestValues.length; _i < _len; _i++) {
            value = objectTestValues[_i];
            _fn(value);
          }
        });
        describe('untyped', function() {
          var value, _fn, _i, _len;
          _fn = function(value) {
            specify(JSON.stringify(value), function() {
              testService.untypedAccessor = value;
              expect(testService.untypedAccessor).to.deep.equal(value);
            });
          };
          for (_i = 0, _len = untypedTestValues.length; _i < _len; _i++) {
            value = untypedTestValues[_i];
            _fn(value);
          }
        });
      });
      describe('call synchronous and asynchronous methods', function() {
        describe('call a synchronous method', function() {
          describe('passing parameters', function() {
            describe('Boolean', function() {
              var value, _fn, _i, _len;
              _fn = function(value) {
                specify(value, function() {
                  testService.setBoolean(value);
                  expect(testService.booleanProperty).to.equal(value);
                });
              };
              for (_i = 0, _len = booleanTestValues.length; _i < _len; _i++) {
                value = booleanTestValues[_i];
                _fn(value);
              }
            });
            describe('int', function() {
              var value, _fn, _i, _len;
              _fn = function(value) {
                specify(value, function() {
                  testService.setInt(value);
                  expect(testService.intProperty).to.equal(value);
                });
              };
              for (_i = 0, _len = intTestValues.length; _i < _len; _i++) {
                value = intTestValues[_i];
                _fn(value);
              }
            });
            describe('uint', function() {
              var value, _fn, _i, _len;
              _fn = function(value) {
                specify(value, function() {
                  testService.setUint(value);
                  expect(testService.uintProperty).to.equal(value);
                });
              };
              for (_i = 0, _len = uintTestValues.length; _i < _len; _i++) {
                value = uintTestValues[_i];
                _fn(value);
              }
            });
            describe('Number', function() {
              var value, _fn, _i, _len;
              _fn = function(value) {
                specify(value, function() {
                  testService.setNumber(value);
                  expect(testService.numberProperty).to.equal(value);
                });
              };
              for (_i = 0, _len = numberTestValues.length; _i < _len; _i++) {
                value = numberTestValues[_i];
                _fn(value);
              }
            });
            describe('String', function() {
              var value, _fn, _i, _len;
              _fn = function(value) {
                specify(value, function() {
                  testService.setString(value);
                  expect(testService.stringProperty).to.equal(value);
                });
              };
              for (_i = 0, _len = stringTestValues.length; _i < _len; _i++) {
                value = stringTestValues[_i];
                _fn(value);
              }
            });
            describe('Array', function() {
              var value, _fn, _i, _len;
              _fn = function(value) {
                specify(JSON.stringify(value), function() {
                  testService.setArray(value);
                  expect(testService.arrayProperty).to.deep.equal(value);
                });
              };
              for (_i = 0, _len = arrayTestValues.length; _i < _len; _i++) {
                value = arrayTestValues[_i];
                _fn(value);
              }
            });
            describe('Object', function() {
              var value, _fn, _i, _len;
              _fn = function(value) {
                specify(JSON.stringify(value), function() {
                  testService.setObject(value);
                  expect(testService.objectProperty).to.deep.equal(value);
                });
              };
              for (_i = 0, _len = objectTestValues.length; _i < _len; _i++) {
                value = objectTestValues[_i];
                _fn(value);
              }
            });
            describe('untyped', function() {
              var value, _fn, _i, _len;
              _fn = function(value) {
                specify(JSON.stringify(value), function() {
                  testService.setUntyped(value);
                  expect(testService.untypedProperty).to.deep.equal(value);
                });
              };
              for (_i = 0, _len = untypedTestValues.length; _i < _len; _i++) {
                value = untypedTestValues[_i];
                _fn(value);
              }
            });
            describe('variadic (i.e. with a variable number of parameters)', function() {
              var count, parameters, _fn, _i, _ref;
              _fn = function(parameters) {
                return specify(parameters.length, function() {
                  expect(testService.getVariadicParametersCount.apply(testService, parameters)).to.equal(parameters.length);
                });
              };
              for (count = _i = 0, _ref = untypedTestValues.length; 0 <= _ref ? _i <= _ref : _i >= _ref; count = 0 <= _ref ? ++_i : --_i) {
                parameters = untypedTestValues.slice(0, count);
                _fn(parameters);
              }
            });
          });
          describe('returning values', function() {
            describe('Boolean', function() {
              var value, _fn, _i, _len;
              _fn = function(value) {
                specify(value, function() {
                  testService.setBoolean(value);
                  expect(testService.getBoolean()).to.equal(value);
                });
              };
              for (_i = 0, _len = booleanTestValues.length; _i < _len; _i++) {
                value = booleanTestValues[_i];
                _fn(value);
              }
            });
            describe('int', function() {
              var value, _fn, _i, _len;
              _fn = function(value) {
                specify(value, function() {
                  testService.setInt(value);
                  expect(testService.getInt()).to.equal(value);
                });
              };
              for (_i = 0, _len = intTestValues.length; _i < _len; _i++) {
                value = intTestValues[_i];
                _fn(value);
              }
            });
            describe('uint', function() {
              var value, _fn, _i, _len;
              _fn = function(value) {
                specify(value, function() {
                  testService.setUint(value);
                  expect(testService.getUint()).to.equal(value);
                });
              };
              for (_i = 0, _len = uintTestValues.length; _i < _len; _i++) {
                value = uintTestValues[_i];
                _fn(value);
              }
            });
            describe('Number', function() {
              var value, _fn, _i, _len;
              _fn = function(value) {
                specify(value, function() {
                  testService.setNumber(value);
                  expect(testService.getNumber()).to.equal(value);
                });
              };
              for (_i = 0, _len = numberTestValues.length; _i < _len; _i++) {
                value = numberTestValues[_i];
                _fn(value);
              }
            });
            describe('String', function() {
              var value, _fn, _i, _len;
              _fn = function(value) {
                specify(value, function() {
                  testService.setString(value);
                  expect(testService.getString()).to.equal(value);
                });
              };
              for (_i = 0, _len = stringTestValues.length; _i < _len; _i++) {
                value = stringTestValues[_i];
                _fn(value);
              }
            });
            describe('Array', function() {
              var value, _fn, _i, _len;
              _fn = function(value) {
                specify(JSON.stringify(value), function() {
                  testService.setArray(value);
                  expect(testService.getArray()).to.deep.equal(value);
                });
              };
              for (_i = 0, _len = arrayTestValues.length; _i < _len; _i++) {
                value = arrayTestValues[_i];
                _fn(value);
              }
            });
            describe('Object', function() {
              var value, _fn, _i, _len;
              _fn = function(value) {
                specify(JSON.stringify(value), function() {
                  testService.setObject(value);
                  expect(testService.getObject()).to.deep.equal(value);
                });
              };
              for (_i = 0, _len = objectTestValues.length; _i < _len; _i++) {
                value = objectTestValues[_i];
                _fn(value);
              }
            });
            describe('untyped', function() {
              var value, _fn, _i, _len;
              _fn = function(value) {
                specify(JSON.stringify(value), function() {
                  testService.setUntyped(value);
                  expect(testService.getUntyped()).to.deep.equal(value);
                });
              };
              for (_i = 0, _len = untypedTestValues.length; _i < _len; _i++) {
                value = untypedTestValues[_i];
                _fn(value);
              }
            });
          });
        });
        describe('call an asynchronous method', function() {
          describe('returning an AsyncToken', function() {
            describe('that succeeds with a result', function() {
              var value, _fn, _i, _len;
              _fn = function(value) {
                specify(JSON.stringify(value), function() {
                  return expect(testService.returnSuccessfulAsyncToken(value)).to.eventually.deep.equal(value);
                });
              };
              for (_i = 0, _len = untypedTestValues.length; _i < _len; _i++) {
                value = untypedTestValues[_i];
                _fn(value);
              }
            });
            describe('that fails with a fault', function() {
              var fault;
              fault = {
                faultCode: 'Expected fault code',
                faultString: 'Expected fault string',
                faultDetail: 'Expected fault detail'
              };
              specify(JSON.stringify(fault), function() {
                return expect(testService.returnFailingAsyncToken(fault.faultCode, fault.faultString, fault.faultDetail)).to.be.rejectedWith(fault);
              });
            });
          });
          return describe('returning a Promise', function() {
            describe('that will later fulfill with a result', function() {
              var value, _fn, _i, _len;
              _fn = function(value) {
                specify(JSON.stringify(value), function() {
                  return expect(testService.returnFulfillingPromise(value)).to.eventually.deep.equal(value);
                });
              };
              for (_i = 0, _len = untypedTestValues.length; _i < _len; _i++) {
                value = untypedTestValues[_i];
                _fn(value);
              }
            });
            describe('that will later reject with a reason', function() {
              var reason;
              reason = 'expected reason';
              specify(reason, function() {
                return expect(testService.returnRejectingPromise(reason)).to.be.rejectedWith(reason);
              });
            });
            describe('fulfilled with a result', function() {
              var value, _fn, _i, _len;
              _fn = function(value) {
                specify(JSON.stringify(value), function() {
                  return expect(testService.returnFulfilledPromise(value)).to.eventually.deep.equal(value);
                });
              };
              for (_i = 0, _len = untypedTestValues.length; _i < _len; _i++) {
                value = untypedTestValues[_i];
                _fn(value);
              }
            });
            describe('rejected with a reason', function() {
              var reason;
              reason = 'expected reason';
              specify(reason, function() {
                return expect(testService.returnRejectedPromise(reason)).to.be.rejectedWith(reason);
              });
            });
          });
        });
      });
      describe('add and remove event listeners', function() {
        beforeEach(function() {
          testService.booleanProperty = true;
          testService.intProperty = 0;
          testService.uintProperty = 4294967295;
          testService.numberProperty = 3.14;
          testService.stringProperty = 'test';
          testService.arrayProperty = [1, 2, 3];
          testService.objectProperty = {
            booleanValue: true,
            intValue: 0,
            uintValue: 4294967295,
            numberValue: 3.14,
            stringValue: 'test',
            arrayValue: [1, 2, 3],
            objectValue: {
              key: 'value'
            }
          };
          testService.untypedProperty = {
            booleanValue: true,
            intValue: 0,
            uintValue: 4294967295,
            numberValue: 3.14,
            stringValue: 'test',
            arrayValue: [1, 2, 3],
            objectValue: {
              key: 'value'
            }
          };
        });
        specify('Custom Event', function() {
          var eventListener, expectedEventPayload;
          expectedEventPayload = {
            type: 'event',
            booleanProperty: testService.booleanProperty,
            intProperty: testService.intProperty,
            uintProperty: testService.uintProperty,
            numberProperty: testService.numberProperty,
            stringProperty: testService.stringProperty,
            arrayProperty: testService.arrayProperty,
            objectProperty: testService.objectProperty,
            untypedProperty: testService.untypedProperty,
            booleanAccessor: testService.booleanProperty,
            intAccessor: testService.intProperty,
            uintAccessor: testService.uintProperty,
            numberAccessor: testService.numberProperty,
            stringAccessor: testService.stringProperty,
            arrayAccessor: testService.arrayProperty,
            objectAccessor: testService.objectProperty,
            untypedAccessor: testService.untypedProperty
          };
          eventListener = sinon.spy();
          testService.addEventListener('event', eventListener);
          testService.triggerEvent();
          expect(eventListener).to.be.calledWithMatch(expectedEventPayload);
          eventListener.reset();
          testService.removeEventListener('event', eventListener);
          testService.triggerEvent();
          expect(eventListener).not.to.have.been.called;
        });
        specify('Custom DynamicEvent', function() {
          var eventListener, expectedDynamicEventPayload;
          expectedDynamicEventPayload = {
            type: 'dynamicEvent',
            booleanProperty: testService.booleanProperty,
            intProperty: testService.intProperty,
            uintProperty: testService.uintProperty,
            numberProperty: testService.numberProperty,
            stringProperty: testService.stringProperty,
            arrayProperty: testService.arrayProperty,
            objectProperty: testService.objectProperty,
            untypedProperty: testService.untypedProperty
          };
          eventListener = sinon.spy();
          testService.addEventListener('dynamicEvent', eventListener);
          testService.triggerDynamicEvent();
          expect(eventListener).to.be.calledWithMatch(expectedDynamicEventPayload);
          eventListener.reset();
          testService.removeEventListener('dynamicEvent', eventListener);
          testService.triggerDynamicEvent();
          expect(eventListener).not.to.have.been.called;
        });
      });
    });
  });

}).call(this);
